name: publish
on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: true

jobs:
  publish:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
      - name: build
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: verify tag version
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          # Verify package.json and tag name match
          TAG_VERSION=${GITHUB_REF#refs/*/}
          PACKAGE_VERSION=`node -p "require('./package.json').version"`
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "package.json/version does not equal the tag name"
            exit 1
          fi

      # Unpublish all versions that match the version in package.json
      - name: unpublish all dev versions
        if: startsWith(github.ref, 'refs/heads/dev/')
        run: |
          PACKAGE_NAME=`node -p "require('./package.json').name"`
          if [[ ${{github.ref}} =~ ^refs/heads/(.*)/.*$ ]]; then
            TAG=${BASH_REMATCH[1]}
            # Get all versions in npm
            VERSIONS=$(npm view ${PACKAGE_NAME} versions --json)
            for i in $VERSIONS; do
              if [[ $i =~ ^\"(.*-${TAG}.*)\" ]]; then
                echo "npm unpublish ${PACKAGE_NAME}@${BASH_REMATCH[1]}"
                npm unpublish ${PACKAGE_NAME}@${BASH_REMATCH[1]} >> unpublish.txt
              fi
            done
            cat unpublish.txt
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: publish-dev
        if: startsWith(github.ref, 'refs/heads/dev/')
        run: |
          export prefix=dev
          export PACKAGE_VERSION=`node -p "require('./package.json').version"`
          export NPM_VERSION="0.0.0-${prefix}.${GITHUB_SHA:0:7}"
          yarn version --new-version "$NPM_VERSION" --no-git-tag-version
          yarn publish --tag ${prefix}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: publish
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          # Verify package.json and tag name match
          TAG_VERSION=${GITHUB_REF#refs/*/}
          PACKAGE_VERSION=`node -p "require('./package.json').version"`
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "package.json/version does not equal the tag name"
            exit 1
          fi

          # Now publish
          yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
